name: Deploy to AWS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init
        working-directory: infra

      - name: Terraform Validate
        run: terraform validate
        working-directory: infra

      - name: Terraform Plan
        id: plan
        run: terraform plan -out=tfplan
        working-directory: infra
        timeout-minutes: 10
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          TF_VAR_key_name: ${{ secrets.TF_VAR_key_name }}
          TF_LOG: DEBUG

      - name: Save Terraform Plan output
        run: terraform show -json tfplan > tfplan.json
        working-directory: infra
        timeout-minutes: 10
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          TF_VAR_key_name: ${{ secrets.TF_VAR_key_name }}
          TF_LOG: DEBUG

      - name: Upload Terraform Plan output as artifact
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: infra/tfplan.json

      - name: Check for Terraform Errors
        run: |
          if grep -q "InvalidParameterValue" infra/tfplan.json; then
            echo "Error detected in Terraform plan output. Please check the tfplan.json file."
            exit 1
          fi

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: infra
        timeout-minutes: 10
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          TF_VAR_key_name: ${{ secrets.TF_VAR_key_name }}
          TF_LOG: DEBUG

      - name: Extract EC2 Public IP
        id: get-ec2-ip
        run: |
          EC2_IP=$(terraform output -raw ec2_public_ip)
          echo "EC2_IP=$EC2_IP" >> $GITHUB_ENV
        working-directory: infra

      - name: Wait for EC2 to be ready for SSH
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem
          for i in {1..10}; do
            if ssh -o StrictHostKeyChecking=no -i private_key.pem ec2-user@$EC2_IP "echo 'EC2 is ready'" 2>/dev/null; then
              echo "SSH connection successful"
              break
            else
              echo "Waiting for EC2 to be ready..."
              sleep 10
            fi
          done

      - name: Copy Docker files to EC2
        run: |
          scp -o StrictHostKeyChecking=no -i private_key.pem -r * ec2-user@$EC2_IP:/home/ec2-user/app

      - name: Deploy on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key.pem ec2-user@$EC2_IP << 'EOF'
            # Install Docker
            sudo yum update -y
            sudo yum install -y docker
            sudo systemctl start docker
            sudo systemctl enable docker

            # Install Docker Compose v2 (plugin style)
            mkdir -p ~/.docker/cli-plugins
            curl -SL https://github.com/docker/compose/releases/latest/download/docker-compose-linux-x86_64 \
              -o ~/.docker/cli-plugins/docker-compose
            chmod +x ~/.docker/cli-plugins/docker-compose

            # Navigate and run Docker commands with sudo
            cd /home/ec2-user/app
            sudo docker compose down || true
            sudo docker compose up -d --build
          EOF

      - name: Rollback Terraform Deployment in case of failure
        if: failure()
        run: |
          echo "Rolling back the Terraform deployment..."
          terraform destroy -auto-approve
        working-directory: infra
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          TF_VAR_key_name: ${{ secrets.TF_VAR_key_name }}
          TF_LOG: DEBUG
